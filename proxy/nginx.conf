server_tokens off;

resolver 127.0.0.11 ipv6=off;

real_ip_header X-Forwarded-For;
set_real_ip_from 0.0.0.0/0;
real_ip_recursive on;

server {
	listen 80;

	server_name localhost;

	add_header Cache-Control 'no-store';
	proxy_no_cache 1;

	set $frontendUrl "http://frontend:4000";
	set $keycloakUrl "http://keycloak:8080";

	location @frontend_error_handler {
		# Serve index.html for all paths so that the SPA can handle routing decisions
		rewrite ^/(.*) /index.html break;
		proxy_pass $frontendUrl;
	}

	# FRONTEND ROUTING
	location / {
		proxy_http_version 1.1;

		# Enable WebSockets
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";

		# Pass the request to S3
		proxy_pass $frontendUrl;

		# If the requested path couldn't be found in S3, the client is either trying to request a single-application path
		# or an asset file that doesn't exist. Since the SPA is responsible for managing its own routing, we should serve
		# the index.html file. This way, the SPA becomes responsible for showing a 404 page if the requested path doesn't
		# exist. To implement this, we can use the error_page directive to pass 404 error (fallback) processing to the
		# @frontend_error_handler named location. We return whatever response code the @frontend_error_handler named
		# location returns.
		proxy_intercept_errors on;
		error_page 404 = @frontend_error_handler;
	}

	location /auth {
		proxy_pass	$keycloakUrl;

		add_header Access-Control-Allow-Origin '*';

		proxy_http_version 1.1;
		proxy_set_header X-Real-IP          $remote_addr;
		proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
	}
}
